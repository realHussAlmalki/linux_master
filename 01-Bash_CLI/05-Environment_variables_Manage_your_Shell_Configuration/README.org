#+TITLE: HA's GNU Emacs LINUX MASTER
#+AUTHOR: HUSSAIN ALMALKI (HA)
#+DESCRIPTION: DT's personal Emacs Linux Master.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#the-shell-environment-introduction][The shell environment: Introduction]]
- [[#what-is-a-shell][What is a shell?]]
  - [[#what-is-a-shell-command-line][What is a shell (command line)]]
- [[#environment-variables][Environment variables]]
  - [[#home][HOME]]
  - [[#pwd][PWD]]
  - [[#user][USER]]
- [[#how-to-set--unset-environment-variables][How to set / unset environment variables]]
  - [[#how-do-we-set-an-environment-variable][How do we set an environment variable?]]
  - [[#how-do-we-delete-an-environment-variable][How do we delete an environment variable?]]
  - [[#path][PATH]]
- [[#modifying-the-path-variable][Modifying the PATH variable]]
  - [[#path-best-practies][PATH: Best practies]]
  - [[#our-own-program][Our own program]]

* The shell environment: Introduction

The she environment is a collectioin of settings, variables, aliases, and configurations. It defines the context in which our programs are run. It thus influences how our programs are being run.
In this chapter:
- You will learn how th shell environment works.
- You will understan environment variables, and how you can set, use and modify them.
- You will learn how you can make persisten changes to your shell environment.

* What is a shell?

A shell:
- Outer layer of the operating system.
- it takes commands from the user and translates them into a form that the kernel can understand.
- It can also display the result of those commands to the user
- In general:
  - Everything that allows the outer world to access the operating system.

So, the graphical user interface is always a shell!

** What is a shell (command line)
Quite othen, the term "shell" only refers to the command line interface (CLI) of an operating system.
CLI. Atext-based interface that allows users to interact with systems by typing commands.

* Environment variables
Used to store configuration information and settings, they influence the shell and program behavior.
By convention: Environment variables written in uppercase letters. *We can list all of them with the following command* ~env~
#+begin_src bash
root@5aaa26cbdddf:/# env
HOSTNAME=5aaa26cbdddf
PWD=/
HOME=/root
TERM=xterm
SHLVL=1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
_=/usr/bin/env
root@5aaa26cbdddf:/#
#+end_src

Example (to be preferred): ~echo "${PWD}"~, ~echo "${PATH}"~, ~echo "${USER}"~. *We can also use* ~echo "$PATH"~, ~echo $PATH~
#+begin_src bash
root@5aaa26cbdddf:~# echo "${PWD}"
/root
root@5aaa26cbdddf:~# echo "${PATH}"
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
root@5aaa26cbdddf:~# echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
root@5aaa26cbdddf:~#
#+end_src


** HOME
- Stores the current user's home directory path
- Example: ~/home/username~
** PWD
- Stores the current working dirctory path
- For the last working directory before: ~OLDPWD~
- Not to be confused with the command ~pwd~
#+begin_src bash
root@5aaa26cbdddf:~# echo "${PWD} - ${OLDPWD}"
/root - /var
root@5aaa26cbdddf:~# cd $OLDPWD
root@5aaa26cbdddf:/var# pwd
/var
#+end_src
** USER
- Stores the current user's suername
- Example: ~username~
   
* How to set / unset environment variables
** How do we set an environment variable?
- wc can use the epxort command to create an envionment variavle:
  - ~export VAR=value~
- We can also overwrite an existing variable:
  - ~VAR=new-value~

#+begin_src bash
root@5aaa26cbdddf:~# export CITY='Jeddah'
root@5aaa26cbdddf:~# echo $CITY
Jeddah
root@5aaa26cbdddf:~# env
HOSTNAME=5aaa26cbdddf
PWD=/root
CITY=Jeddah
HOME=/root
TERM=xterm
SHLVL=1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
OLDPWD=/var
_=/usr/bin/env
root@5aaa26cbdddf:~# echo "${CITY}"
Jeddah
root@5aaa26cbdddf:~# CITY='JEDDAH'
root@5aaa26cbdddf:~# echo "${CITY}"
JEDDAH
root@5aaa26cbdddf:~#
#+end_src

** How do we delete an environment variable?
- ~unset VAR~
- This is useful for troubleshooting and cleaning up of the environment
#+begin_src bash
root@5aaa26cbdddf:~# env
HOSTNAME=5aaa26cbdddf
PWD=/root
CITY=JEDDAH
HOME=/root
TERM=xterm
SHLVL=1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
OLDPWD=/var
_=/usr/bin/env
root@5aaa26cbdddf:~# unset CITY
root@5aaa26cbdddf:~# env
HOSTNAME=5aaa26cbdddf
PWD=/root
HOME=/root
TERM=xterm
SHLVL=1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
OLDPWD=/var
_=/usr/bin/env
root@5aaa26cbdddf:~#
#+end_src  

** PATH
The environment variable PATH is one of the most important variables in our shell.
- Stores a list of directories
- Directories searched for executable programs
- Order matters: direcories searched from left to right
- Multiple direcotries separated by colons ~(":")~

#+begin_src bash
root@5aaa26cbdddf:~# echo "${PATH}"
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
root@5aaa26cbdddf:~# which cat
/usr/bin/cat
root@5aaa26cbdddf:~# /usr/bin/cat users.txt
Natalie Taylor
Bradley Simpson
root@5aaa26cbdddf:~# /usr/lcal/sbin/cat users.txt
bash: /usr/lcal/sbin/cat: No such file or directory
root@5aaa26cbdddf:~#
#+end_src

 

* Modifying the PATH variable
Sometimes, we want to modify the PATH variable. For exmaple, we have a separtate directory in which we want to install executable files on our system.
- For example: /opt/homebrew/bin
- Usually, we want to append a directory to our PATH:
  - ~PATH="${PATH}:/new/path"~
#+begin_src bash
root@5aaa26cbdddf:~# mkdir bin
root@5aaa26cbdddf:~# cd bin/
root@5aaa26cbdddf:~/bin# pwd
/root/bin
root@5aaa26cbdddf:~/bin# ls
root@5aaa26cbdddf:~/bin# PATH="${PATH}:/root/bin"
root@5aaa26cbdddf:~/bin# echo "${PATH}"
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/bin
root@5aaa26cbdddf:~/bin# touch custom_program
root@5aaa26cbdddf:~/bin# chmod +x custom_program
root@5aaa26cbdddf:~/bin# ls -l
total 0
-rwxr-xr-x 1 root root 0 Jul 25 16:44 custom_program
root@5aaa26cbdddf:~/bin# custom_program
root@5aaa26cbdddf:~/bin# cd ../
root@5aaa26cbdddf:~# custom_program
root@5aaa26cbdddf:~#
#+end_src

- Common issues: "command not found"
  - In that case, we need to verify the contents of the variable PATH:
  - echo "${PATH}"
  - the desired directory should be included
  - The order of the entries in PATH must be coorect
  - If we need to find a program:
    - ~which program~

#+begin_src bash
root@5aaa26cbdddf:~# which custom_program
/root/bin/custom_program
root@5aaa26cbdddf:~# which cat
/usr/bin/cat
#+end_src

** PATH: Best practies
- Keep system directories at the beginning
- Place user-specific direcorires after system direcories
- Avoid unnecessary duplication of directories
- Minimize the number of direcories to improve search efficiency
- Reqularly review and clean up the PATH
- Be cautius when modifying the PATH for system-wide changes
** Our own program
#+begin_src bash
root@5aaa26cbdddf:~# cd bin
root@5aaa26cbdddf:~/bin# touch hello_world
root@5aaa26cbdddf:~/bin# chmod +x hello_world
root@5aaa26cbdddf:~/bin# vim hello_world
bash: vim: command not found
root@5aaa26cbdddf:~/bin# nano hello_world
root@5aaa26cbdddf:~/bin# cat hello_world
#!/usr/bin/env python3
print("Hello, World!")
root@5aaa26cbdddf:~/bin#
root@5aaa26cbdddf:~/bin# cd ~/
root@5aaa26cbdddf:~# pwd
/root
root@5aaa26cbdddf:~# hello_world
Hello, World!
#+end_src
