#+TITLE: HA's GNU Emacs LINUX MASTER
#+AUTHOR: HUSSAIN ALMALKI (HA)
#+DESCRIPTION: DT's personal Emacs Linux Master.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#file-management-in-bash][File Management in BASH]]
  - [[#in-this-chapter][IN THIS CHAPTER]]
- [[#touch-and-mkdir][touch and mkdir]]
  - [[#touch][touch]]
  - [[#mkdir-make-directory][mkdir (make directory)]]
- [[#mv-and-cp][mv and cp]]
  - [[#mv-move][mv (move)]]
  - [[#cp-copy][cp (copy)]]
- [[#how-to-delete-files-and-folders][How to delete files and folders]]
  - [[#rm-remove][rm (remove)]]
- [[#exercise-file-management][Exercise: File management]]
  - [[#solution][SOLUTION:]]
- [[#filename-expansion-globbing][Filename expansion (globbing)]]
  - [[#filename-expansion][Filename expansion]]
  - [[#important][IMPORTANT:]]
- [[#additional-wildcards-for-globbin][Additional wildcards for globbin]]
  - [[#additional-ways-to-use-globbing][Additional ways to use globbing]]
- [[#exercise-extracting-files][Exercise: Extracting Files]]
- [[#bonus-the-find-program][Bonus: The find program]]
- [[#how-to-read-files][How to read files]]
  - [[#cat][cat]]
  - [[#head][head]]
  - [[#tail][tail]]
  - [[#less][less]]
- [[#how-to-get-the-size-of-a-file][How to get the size of a file]]
  - [[#wc-word-count][wc (word count):]]
  - [[#du-disk-usage][du (disk usage):]]
- [[#how-to-edit-files][How to edit files]]

* File Management in BASH
** IN THIS CHAPTER
- You will learn how to creat folders and files
- You will learn how to copy and move files
- You will learn how to delete files and how dangerous ~Bash~ can be (and how you can mitigate that)
- *In addition, you will solve some real-world problems*
  - Extracting photos from a folder structure (such as an SD-card from a camera)
  - And you will extract all Excel and PDF files from a nested folder structure
* touch and mkdir
** touch
- typical use case: create and empty file (or multiple files)
#+begin_src bash
root@5aaa26cbdddf:~# ls
root@5aaa26cbdddf:~# pwd
/root
root@5aaa26cbdddf:~# touch max.txt
root@5aaa26cbdddf:~# ls
max.txt
root@5aaa26cbdddf:~# touch andy.txt laura.txt
root@5aaa26cbdddf:~# ls
andy.txt  laura.txt  max.txt
root@5aaa26cbdddf:~#
#+end_src
- *more precisely*:
  - to modify the timestamp of a file
  - if the file already exists, only its timestamp will be modified
  - otherwise, a new (and empty) file is creatd
#+begin_src bash
root@5aaa26cbdddf:~# ls -l
total 0
-rw-r--r-- 1 root root 0 Jul 10 07:56 andy.txt
-rw-r--r-- 1 root root 0 Jul 10 07:56 laura.txt
-rw-r--r-- 1 root root 0 Jul 10 07:55 max.txt
root@5aaa26cbdddf:~# touch max.txt
root@5aaa26cbdddf:~# ls -l
total 0
-rw-r--r-- 1 root root 0 Jul 10 07:56 andy.txt
-rw-r--r-- 1 root root 0 Jul 10 07:56 laura.txt
-rw-r--r-- 1 root root 0 Jul 10 07:58 max.txt
root@5aaa26cbdddf:~#
#+end_src

** mkdir (make directory)
- create a new directory
#+begin_src bash
root@5aaa26cbdddf:~# ls
andy.txt  laura.txt  max.txt
root@5aaa26cbdddf:~# mkdir ready
root@5aaa26cbdddf:~# ls
andy.txt  laura.txt  max.txt  ready
root@5aaa26cbdddf:~# ls -la
total 20
drwx------ 1 root root 4096 Jul 10 07:59 .
drwxr-xr-x 1 root root 4096 Jul 10 07:53 ..
-rw-r--r-- 1 root root  571 Apr 10  2021 .bashrc
-rw-r--r-- 1 root root  161 Jul  9  2019 .profile
-rw-r--r-- 1 root root    0 Jul 10 07:56 andy.txt
-rw-r--r-- 1 root root    0 Jul 10 07:56 laura.txt
-rw-r--r-- 1 root root    0 Jul 10 07:58 max.txt
drwxr-xr-x 2 root root 4096 Jul 10 07:59 ready
root@5aaa26cbdddf:~# ls -l --color
total 4
-rw-r--r-- 1 root root    0 Jul 10 07:56 andy.txt
-rw-r--r-- 1 root root    0 Jul 10 07:56 laura.txt
-rw-r--r-- 1 root root    0 Jul 10 07:58 max.txt
drwxr-xr-x 2 root root 4096 Jul 10 07:59 ready
#+end_src

* mv and cp
** mv (move)
- move an existing file to another location
- can also be used to rename an existing file
#+begin_src bash
root@5aaa26cbdddf:~# ls
andy.txt  laura.txt  max.txt  ready
root@5aaa26cbdddf:~# mv andy.txt ready/
root@5aaa26cbdddf:~# ls
laura.txt  max.txt  ready
root@5aaa26cbdddf:~# ls ready/
andy.txt
root@5aaa26cbdddf:~# cd ready/
root@5aaa26cbdddf:~/ready# ls
andy.txt
root@5aaa26cbdddf:~/ready# cd ..
root@5aaa26cbdddf:~# mv max.txt maximilian.txt
root@5aaa26cbdddf:~# ls
laura.txt  maximilian.txt  ready
root@5aaa26cbdddf:~# mv maximilian.txt ready/max.txt
root@5aaa26cbdddf:~# ls ready/
andy.txt  max.txt
root@5aaa26cbdddf:~#
#+end_src

** cp (copy)
- to copy an existing file
- cp -R: copies a whole folder
#+begin_src bash
root@5aaa26cbdddf:~# ls
laura.txt  ready
root@5aaa26cbdddf:~# cp laura.txt ready/
root@5aaa26cbdddf:~# ls ready/
andy.txt  laura.txt  max.txt
root@5aaa26cbdddf:~# cp ready/max.txt .
root@5aaa26cbdddf:~# ls
laura.txt  max.txt  ready
root@5aaa26cbdddf:~# cp ready/max.txt max_bak.txt
root@5aaa26cbdddf:~# ls
laura.txt  max.txt  max_bak.txt  ready
root@5aaa26cbdddf:~# cp -R ready/ ready_bak
root@5aaa26cbdddf:~# ls -l
total 8
-rw-r--r-- 1 root root    0 Jul 10 07:56 laura.txt
-rw-r--r-- 1 root root    0 Jul 10 08:07 max.txt
-rw-r--r-- 1 root root    0 Jul 10 08:07 max_bak.txt
drwxr-xr-x 2 root root 4096 Jul 10 08:07 ready
drwxr-xr-x 2 root root 4096 Jul 10 08:08 ready_bak
root@5aaa26cbdddf:~# ls ready_1/
andy.txt  laura.txt  max.txt
#+end_src

* How to delete files and folders
** rm (remove)
- to remove a file (or multiple files at once)
- for deleting a directory, you need to use the option -r
  - works for empty and non-empty directories
#+begin_src bash
root@5aaa26cbdddf:~# ls
laura.txt  max.txt  max_bak.txt  ready	ready_bak
root@5aaa26cbdddf:~# rm max_bak.txt
root@5aaa26cbdddf:~# ls
laura.txt  max.txt  ready  ready_bak
root@5aaa26cbdddf:~# rm -r ready_bak/
root@5aaa26cbdddf:~# ls
laura.txt  max.txt  ready
#+end_src

* Exercise: File management
- In the next lecture, I will present you an exercise.
- It's pretty much just a play-along to do some file management.
- *The goal is*:
  - You can prectice the file management commands for Bash.
  - You can use a file browser to see what each command does and how those commands work.
  - So please don't just execute the commands, also have a look at what they do and how they change the files!
- *Outlook*:
  - Later exercises in thsi course will be more practical, but we need to practice the basice first.
** SOLUTION:
#+begin_src bash
root@5aaa26cbdddf:/# pwd
/
root@5aaa26cbdddf:/# cd /root
root@5aaa26cbdddf:~# pwd
/root
root@5aaa26cbdddf:~# ls -l
total 4
-rw-r--r-- 1 root root    0 Jul 10 07:56 laura.txt
-rw-r--r-- 1 root root    0 Jul 10 08:07 max.txt
drwxr-xr-x 2 root root 4096 Jul 10 08:07 ready
root@5aaa26cbdddf:~# mkdir tmp_website
root@5aaa26cbdddf:~# cd tmp_website/
root@5aaa26cbdddf:~/tmp_website# pwd
/root/tmp_website
root@5aaa26cbdddf:~/tmp_website# touch index.html style.css script.js
root@5aaa26cbdddf:~/tmp_website# ls
index.html  script.js  style.css
root@5aaa26cbdddf:~/tmp_website# mkdir styles
root@5aaa26cbdddf:~/tmp_website# mv style.css styles
root@5aaa26cbdddf:~/tmp_website# ls
index.html  script.js  styles
root@5aaa26cbdddf:~/tmp_website# ls -l
total 4
-rw-r--r-- 1 root root    0 Jul 12 08:13 index.html
-rw-r--r-- 1 root root    0 Jul 12 08:13 script.js
drwxr-xr-x 2 root root 4096 Jul 12 08:13 styles
root@5aaa26cbdddf:~/tmp_website# ls styles/
style.css
root@5aaa26cbdddf:~/tmp_website# pwd
/root/tmp_website
root@5aaa26cbdddf:~/tmp_website# mkdir scripts
root@5aaa26cbdddf:~/tmp_website# ls -l
total 8
-rw-r--r-- 1 root root    0 Jul 12 08:13 index.html
-rw-r--r-- 1 root root    0 Jul 12 08:13 script.js
drwxr-xr-x 2 root root 4096 Jul 12 08:14 scripts
drwxr-xr-x 2 root root 4096 Jul 12 08:13 styles
root@5aaa26cbdddf:~/tmp_website# mv script.js scripts/index.js
root@5aaa26cbdddf:~/tmp_website# ls scripts/
index.js
root@5aaa26cbdddf:~/tmp_website# mkdir pages
root@5aaa26cbdddf:~/tmp_website# touch pages/page1.html
root@5aaa26cbdddf:~/tmp_website# ls pages/
page1.html
root@5aaa26cbdddf:~/tmp_website# cp pages/page1.html pages/page2.html
root@5aaa26cbdddf:~/tmp_website# ls pages/
page1.html  page2.html
root@5aaa26cbdddf:~/tmp_website# ls
index.html  pages  scripts  styles
root@5aaa26cbdddf:~/tmp_website# mv pages/page2.html .
root@5aaa26cbdddf:~/tmp_website# ls
index.html  page2.html	pages  scripts	styles
root@5aaa26cbdddf:~/tmp_website#
root@5aaa26cbdddf:~/tmp_website# rm index.html pages/page1.html
root@5aaa26cbdddf:~/tmp_website# ls
page2.html  pages  scripts  styles
root@5aaa26cbdddf:~/tmp_website# ls pages/
root@5aaa26cbdddf:~/tmp_website#
root@5aaa26cbdddf:~/tmp_website# mv page2.html index.html
root@5aaa26cbdddf:~/tmp_website# ls
index.html  pages  scripts  styles
root@5aaa26cbdddf:~/tmp_website# rmdir pages/
root@5aaa26cbdddf:~/tmp_website# ls -la
total 16
drwxr-xr-x 4 root root 4096 Jul 12 08:20 .
drwx------ 1 root root 4096 Jul 12 08:12 ..
-rw-r--r-- 1 root root    0 Jul 12 08:17 index.html
drwxr-xr-x 2 root root 4096 Jul 12 08:15 scripts
drwxr-xr-x 2 root root 4096 Jul 12 08:13 styles
root@5aaa26cbdddf:~/tmp_website# cd ..
root@5aaa26cbdddf:~# rm -r tmp_website/
root@5aaa26cbdddf:~# ls
laura.txt  max.txt  ready
root@5aaa26cbdddf:~#
#+end_src
* Filename expansion (globbing)
** Filename expansion
- Bash can rewrite our command before it is being executed.
- Globbing recongnizes and expands pre-defined wildcard characters.
- It will then search for files that match this pattern and expand (rewrite) out command.
- Thsi allows us to easily access multiple files.
#+begin_src bash
root@5aaa26cbdddf:~# ls
root@5aaa26cbdddf:~# touch IMG_2004.jpg IMG_6423.jpg IMG_6662.jpg IMG_6677.MOV IMG_6677.SRT
root@5aaa26cbdddf:~# ls
IMG_2004.jpg  IMG_6423.jpg  IMG_6662.jpg  IMG_6677.MOV	IMG_6677.SRT
root@5aaa26cbdddf:~# mkdir images
root@5aaa26cbdddf:~# mv IMG_2004.jpg IMG_6423.jpg IMG_6662.jpg images/
root@5aaa26cbdddf:~# ls
IMG_6677.MOV  IMG_6677.SRT  images
root@5aaa26cbdddf:~# ls images/
IMG_2004.jpg  IMG_6423.jpg  IMG_6662.jpg
root@5aaa26cbdddf:~# mv images/IMG_2004.jpg images/IMG_6423.jpg images/IMG_6662.jpg .
root@5aaa26cbdddf:~# ls
IMG_2004.jpg  IMG_6423.jpg  IMG_6662.jpg  IMG_6677.MOV	IMG_6677.SRT  images
#+end_src
- *Wildcard character:* *
  - Matches 0 to any number of characters.
#+begin_src bash
root@5aaa26cbdddf:~# ls
IMG_2004.jpg  IMG_6423.jpg  IMG_6662.jpg  IMG_6677.MOV	IMG_6677.SRT  images
root@5aaa26cbdddf:~# mv *.jpg images/
root@5aaa26cbdddf:~# ls images/
IMG_2004.jpg  IMG_6423.jpg  IMG_6662.jpg
root@5aaa26cbdddf:~# ls
IMG_6677.MOV  IMG_6677.SRT  images
root@5aaa26cbdddf:~# mv images/*.jpg .
root@5aaa26cbdddf:~# ls
IMG_2004.jpg  IMG_6423.jpg  IMG_6662.jpg  IMG_6677.MOV	IMG_6677.SRT  images
root@5aaa26cbdddf:~# echo *.jpg
IMG_2004.jpg IMG_6423.jpg IMG_6662.jpg
root@5aaa26cbdddf:~# ls *.jpg
IMG_2004.jpg  IMG_6423.jpg  IMG_6662.jpg
root@5aaa26cbdddf:~# echo '*.jpg'
*.jpg
root@5aaa26cbdddf:~# echo *
IMG_2004.jpg IMG_6423.jpg IMG_6662.jpg IMG_6677.MOV IMG_6677.SRT images
#+end_src

** IMPORTANT:
- The wildcard characters must not be quoted (so neither in 'single quotes' nor "double quotes").
- Globbing does not use regular expressions.

* Additional wildcards for globbin
** Additional ways to use globbing
|-------+-------------------------------------------------------------------------------|
| ?     | matches any single character                                                  |
| [0-9] | The square brackets allow us to specify a character range (here: all numbers) |
| **    | matches zero up to arbitrarily many characters (indluding /)                  |

#+begin_src bash
root@5aaa26cbdddf:~# ls
IMG_6677.MOV  IMG_6677.SRT  images
root@5aaa26cbdddf:~# echo IMG?6677.*
IMG_6677.MOV IMG_6677.SRT
root@5aaa26cbdddf:~# mv IMG_6677.SRT IMGa6677.SRT
root@5aaa26cbdddf:~# ls
IMG_6677.MOV  IMGa6677.SRT  images
root@5aaa26cbdddf:~# echo IMG?6677.*
IMG_6677.MOV IMGa6677.SRT
root@5aaa26cbdddf:~# ls images/
IMG_2004.jpg  IMG_6243.jpg  IMG_6662.jpg
root@5aaa26cbdddf:~# echo ./images/IMG_6[0-9][0-9][0-9].[a-z][a-z][a-z]
./images/IMG_6243.jpg ./images/IMG_6662.jpg
root@5aaa26cbdddf:~# echo ./images/IMG_6*
./images/IMG_6243.jpg ./images/IMG_6662.jpg
root@5aaa26cbdddf:~# echo **/*.jpg
images/IMG_2004.jpg images/IMG_6243.jpg images/IMG_6662.jpg
#+end_src

* Exercise: Extracting Files
- Imagine we're running a company
- And we need to urgently provide documents for a court hearing
- For our exercise:
  - We need to provide all Excel and PDF file for January and February
  - How do we do this?
  - Can yo use globbign for this?

#+begin_src bash
~/Templates ❯ lt
.
├── Purchasing
│   ├── '01 - January'
│   │   ├── 'Balance Sheet.xlsx'
│   │   └── Invoice.pdf
│   ├── '02 - February'
│   │   ├── additional-table.xlsx
│   │   ├── important-business-figures.xlsx
│   │   ├── important-invoice.pdf
│   │   └── not-important.mp4
│   ├── '03 - March'
│   │   └── numbers-from-march.xlsx
│   └── .DS_Store
└── Sales
    ├── '01 - January'
    │   └── Sales-January.xlsx
    ├── '02 - February'
    │   └── Balance-Sheet-February.pdf
    ├── '03 - March'
    │   ├── Additional-Invoice-March.pdf
    │   └── Sales-March.xlsx
    └── .DS_Store
#+end_src

#+begin_src bash 
~/Templates ❯ echo */0[1-2]*/*.xlsx
Purchasing/01 - January/Balance Sheet.xlsx Purchasing/02 - February/additional-table.xlsx Purchasing/02 - February/important-business-figures.xlsx Sales/01 - January/Sales-January.xlsx
#+end_src

#+begin_src bash
~/Templates ❯ mkdir Export

~/Templates ❯ lt
.
├── Export
├── Purchasing
│   ├── '01 - January'
│   │   ├── 'Balance Sheet.xlsx'
│   │   └── Invoice.pdf
│   ├── '02 - February'
│   │   ├── additional-table.xlsx
│   │   ├── important-business-figures.xlsx
│   │   ├── important-invoice.pdf
│   │   └── not-important.mp4
│   ├── '03 - March'
│   │   └── numbers-from-march.xlsx
│   └── .DS_Store
└── Sales
    ├── '01 - January'
    │   └── Sales-January.xlsx
    ├── '02 - February'
    │   └── Balance-Sheet-February.pdf
    ├── '03 - March'
    │   ├── Additional-Invoice-March.pdf
    │   └── Sales-March.xlsx
    └── .DS_Store
#+end_src

#+begin_src bash 
~/Templates ❯ cp */0[1-2]*/*.xlsx Export
~/Templates ❯ lt
.
├── Export
│   ├── additional-table.xlsx
│   ├── 'Balance Sheet.xlsx'
│   ├── important-business-figures.xlsx
│   └── Sales-January.xlsx
├── Purchasing
│   ├── '01 - January'
│   │   ├── 'Balance Sheet.xlsx'
│   │   └── Invoice.pdf
│   ├── '02 - February'
│   │   ├── additional-table.xlsx
│   │   ├── important-business-figures.xlsx
│   │   ├── important-invoice.pdf
│   │   └── not-important.mp4
│   ├── '03 - March'
│   │   └── numbers-from-march.xlsx
│   └── .DS_Store
└── Sales
    ├── '01 - January'
    │   └── Sales-January.xlsx
    ├── '02 - February'
    │   └── Balance-Sheet-February.pdf
    ├── '03 - March'
    │   ├── Additional-Invoice-March.pdf
    │   └── Sales-March.xlsx
    └── .DS_Store
#+end_src

#+begin_src bash
~/Templates ❯ cp */0[1-2]*/*.xlsx */0[1-2]*/*.pdf Export
~/Templates ❯ lt
.
├── Export
│   ├── additional-table.xlsx
│   ├── Balance-Sheet-February.pdf
│   ├── 'Balance Sheet.xlsx'
│   ├── important-business-figures.xlsx
│   ├── important-invoice.pdf
│   ├── Invoice.pdf
│   └── Sales-January.xlsx
├── Purchasing
│   ├── '01 - January'
│   │   ├── 'Balance Sheet.xlsx'
│   │   └── Invoice.pdf
│   ├── '02 - February'
│   │   ├── additional-table.xlsx
│   │   ├── important-business-figures.xlsx
│   │   ├── important-invoice.pdf
│   │   └── not-important.mp4
│   ├── '03 - March'
│   │   └── numbers-from-march.xlsx
│   └── .DS_Store
└── Sales
    ├── '01 - January'
    │   └── Sales-January.xlsx
    ├── '02 - February'
    │   └── Balance-Sheet-February.pdf
    ├── '03 - March'
    │   ├── Additional-Invoice-March.pdf
    │   └── Sales-March.xlsx
    └── .DS_Store
#+end_src

#+begin_src bash
~/Templates ❯ cp */0[1-2]*/*.{pdf,xlsx} Export/
#+end_src

* Bonus: The find program
- Instead of searching by name we can use the find program for a more spohisticated search
- *find*
  - We should provide a path as a first parameter
    (e.g. *.* for current working directory)

#+begin_src bash
[dt@archlinux Templates]$ find .
.
./Purchasing
./Purchasing/01 - January
./Purchasing/01 - January/Invoice.pdf
./Purchasing/01 - January/Balance Sheet.xlsx
./Purchasing/.DS_Store
./Purchasing/02 - February
./Purchasing/02 - February/not-important.mp4
./Purchasing/02 - February/important-invoice.pdf
./Purchasing/02 - February/important-business-figures.xlsx
./Purchasing/02 - February/additional-table.xlsx
./Purchasing/03 - March
./Purchasing/03 - March/numbers-from-march.xlsx
./Sales
./Sales/01 - January
./Sales/01 - January/Sales-January.xlsx
./Sales/.DS_Store
./Sales/02 - February
./Sales/02 - February/Balance-Sheet-February.pdf
./Sales/03 - March
./Sales/03 - March/Sales-March.xlsx
./Sales/03 - March/Additional-Invoice-March.pdf
./Export
./Export/Balance-Sheet-February.pdf
./Export/Invoice.pdf
./Export/Sales-January.xlsx
./Export/important-invoice.pdf
./Export/important-business-figures.xlsx
./Export/Balance Sheet.xlsx
./Export/additional-table.xlsx
#+end_src

- Examples:
  - if we want to limit the file type:
    - Only files: find . -type f
    - Only directories find . -type d
#+begin_src bash
[dt@archlinux Templates]$ find . -type d
.
./Purchasing
./Purchasing/01 - January
./Purchasing/02 - February
./Purchasing/03 - March
./Sales
./Sales/01 - January
./Sales/02 - February
./Sales/03 - March
./Export
#+end_src

#+begin_src bash
[dt@archlinux Templates]$ find . -type f
./Purchasing/01 - January/Invoice.pdf
./Purchasing/01 - January/Balance Sheet.xlsx
./Purchasing/.DS_Store
./Purchasing/02 - February/not-important.mp4
./Purchasing/02 - February/important-invoice.pdf
./Purchasing/02 - February/important-business-figures.xlsx
./Purchasing/02 - February/additional-table.xlsx
./Purchasing/03 - March/numbers-from-march.xlsx
./Sales/01 - January/Sales-January.xlsx
./Sales/.DS_Store
./Sales/02 - February/Balance-Sheet-February.pdf
./Sales/03 - March/Sales-March.xlsx
./Sales/03 - March/Additional-Invoice-March.pdf
./Export/Balance-Sheet-February.pdf
./Export/Invoice.pdf
./Export/Sales-January.xlsx
./Export/important-invoice.pdf
./Export/important-business-figures.xlsx
./Export/Balance Sheet.xlsx
./Export/additional-table.xlsx
#+end_src

- Find all files have been modified within the last 7 days:
  - find . -type f -mtime -7
  - mtime: modification timestamp
- Find all files that are large then 10MB
  - find . -type f -size +10M
- Delete all empty files in a directory:
  - find . -empty -delete

* How to read files
** cat
The command cat allows to print the contents of a file
- ~cat data.txt~
#+begin_src bash
root@5aaa26cbdddf:~# ls
Purchasing  bash.txt  romeo.txt  sales
root@5aaa26cbdddf:~# cat bash.txt
Bash is cool!

I want to learn more about the shell!
root@5aaa26cbdddf:~# cat b*
Bash is cool!

I want to learn more about the shell!
#+end_src

** head
The command shows us the start of a (text) file. We can specify the Paramter ~-n~ for the number of lines.
- ~head -n 5 data.txt~
#+begin_src bash
root@5aaa26cbdddf:~# cat romeo.txt | head -n 5
Romeo and Juliet
by William Shakespeare
Edited by Barbara A. Mowat and Paul Werstine
  with Michael Poston and Rebecca Niles
Folger Shakespeare Library
root@5aaa26cbdddf:~# head -n 5 romeo.txt
Romeo and Juliet
by William Shakespeare
Edited by Barbara A. Mowat and Paul Werstine
  with Michael Poston and Rebecca Niles
Folger Shakespeare Library
#+end_src
** tail
Then command read a file from the end, some options as head
- ~tail -n 5 data.txt~
#+begin_src bash
root@5aaa26cbdddf:~# cat romeo.txt | tail -n 5
Go hence to have more talk of these sad things.
Some shall be pardoned, and some punished.
For never was a story of more woe
Than this of Juliet and her Romeo.
[All exit.]
root@5aaa26cbdddf:~# tail -n 5 romeo.txt
Go hence to have more talk of these sad things.
Some shall be pardoned, and some punished.
For never was a story of more woe
Than this of Juliet and her Romeo.
[All exit.]
#+end_src
** less
Allows us to read large files, we can use the arrow keys to navigate through the file. Or we can use ~f~ ~(forward)~ and ~(backward)~ to navigate a whole page ahead or back.
We can also navigate to a percentage of our content. We just enter ~50p~ to navigate to 50% of our content. We can use the ~=~ to show info about our current position. We can also use the option ~-N~ to display row numbers.
*** find in tile
- Forward search: ~/Search Term~
- Backwards search: ~?Search Term~
***  to quit: q

* How to get the size of a file
If we just cat a large file... the whole file will be printed in the terminal. This may take quite long... can't we check the size of a file ahead of time?
** wc (word count):
- ~wc file.txt~
- ~wc -lwc file.txt~
Prints out the number of lines, the number of word, and the number of bytes in the files.
#+begin_src bash
root@5aaa26cbdddf:~# wc -lwc romeo.txt
  5011  25913 146706 romeo.txt
root@5aaa26cbdddf:~#
#+end_src
- ~wc -l file.txt~ counts the nuber of lines
- ~wc -w file.txt~ counts the number of words
- ~wc -c file.txt~ counts the number of bytes (=8 bit ASCII-characters)
** du (disk usage):
It will calculate the size of all times in this folder. We can also specify the paramter ~"-s"~, to just get a summary.
#+begin_src bash
root@5aaa26cbdddf:~# du
4	./sales
4	./Purchasing
4	./.local/share/nano
8	./.local/share
12	./.local
188	.
#+end_src

#+begin_src bash
root@5aaa26cbdddf:~# du romeo.txt
144	romeo.txt
root@5aaa26cbdddf:~# du -h romeo.txt
144K	romeo.txt
#+end_src

* How to edit files
There's no build-in text editero for bash. We have to install additiona software for that.
- pico / nano: A simple editor for text file in bash
- vi / vim: A more advanced text editor
